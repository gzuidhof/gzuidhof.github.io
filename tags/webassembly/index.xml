<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>webassembly on Guido.io</title>
    <link>https://guido.io/tags/webassembly/</link>
    <description>Recent content in webassembly on Guido.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://guido.io/tags/webassembly/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Embedding WebAssembly in Javascript code using wasmwrap</title>
      <link>https://guido.io/posts/embedding-webassembly-in-javascript-without-a-bundler/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://guido.io/posts/embedding-webassembly-in-javascript-without-a-bundler/</guid>
      <description>As a followup to my previous post, I found that in practice embedding a WebAssembly binary in code as a base64 string using a bundler (such as Webpack or Rollup) is still not ideal. So I created a small tool, wasmwrap that generates a plain Javascript or Typescript file for you instead.
To install it:
npm install wasmwrap --save-devThen you can use it as such:
wasmwrap --input my-file.wasm --output myFile.</description>
    </item>
    
    <item>
      <title>Embedding WebAssembly in Javascript code</title>
      <link>https://guido.io/posts/embedding-webassembly-in-javascript/</link>
      <pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://guido.io/posts/embedding-webassembly-in-javascript/</guid>
      <description>Actually shipping compiled WebAssembly code can be tricky. Especially when you want the wasm module to be easy to install and use through NPM it gets complicated, users will have to use wasm plugins for their bundler of choice (such as Webpack or Rollup), or they will need to host the wasm file separately and pass it into your library.
If the developer of this project does not interact with WASM code otherwise, this may be a big ask.</description>
    </item>
    
  </channel>
</rss>