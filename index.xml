<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guido.io</title>
    <link>https://guido.io/</link>
    <description>Recent content on Guido.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://guido.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Embedding WebAssembly in Javascript code using wasmwrap</title>
      <link>https://guido.io/posts/embedding-webassembly-in-javascript-without-a-bundler/</link>
      <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://guido.io/posts/embedding-webassembly-in-javascript-without-a-bundler/</guid>
      <description>As a followup to my previous post, I found that in practice embedding a WebAssembly binary in code using a bundler (such as Webpack or Rollup) is still not ideal. So I created a small tool, wasmwrap that generates a plain Javascript or Typescript file for you instead.
To install it:
npm install wasmwrap --save-devThen you can use it as such:
wasmwrap --input my-file.wasm --output myFile.tsand it then generates the code for you:</description>
    </item>
    
    <item>
      <title>Embedding WebAssembly in Javascript code</title>
      <link>https://guido.io/posts/embedding-webassembly-in-javascript/</link>
      <pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://guido.io/posts/embedding-webassembly-in-javascript/</guid>
      <description>Actually shipping compiled WebAssembly code can be tricky. Especially when you want the wasm module to be easy to install and use through NPM it gets complicated, users will have to use wasm plugins for their bundler of choice (such as Webpack or Rollup), or they will need to host the wasm file separately and pass it into your library.
If the developer of this project does not interact with WASM code otherwise, this may be a big ask.</description>
    </item>
    
    <item>
      <title>An introduction to AssemblyScript</title>
      <link>https://guido.io/posts/introduction-to-assemblyscript/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://guido.io/posts/introduction-to-assemblyscript/</guid>
      <description>⚠️ I am still writing this article, consider this an unfinished first draft.
AssemblyScript is a programming language that is almost the same as Typescript and compiles to WebAssembly.
WebAssembly allows near-native speed for programs that rely on heavy computation with smaller binaries. Any modern browser nowadays supports it as well as Deno and Node. It will not replace Javascript itself anytime soon, but for some problems it can be a good choice, especially those that involve extensive computation.</description>
    </item>
    
    <item>
      <title>Games</title>
      <link>https://guido.io/games/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://guido.io/games/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://guido.io/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://guido.io/projects/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>